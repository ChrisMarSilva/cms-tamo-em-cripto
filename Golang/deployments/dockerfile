FROM golang:1.22-alpine as builder
WORKDIR /app
COPY . ./
RUN go build -o /test-app main.go
RUN > /app/.env

FROM scratch
COPY --from=builder /test-app /test-app
COPY --from=builder /app/.env .env
EXPOSE 3000
ENTRYPOINT [ "./test-app" ]





FROM golang:1.22.0 AS build-stage
WORKDIR /app
COPY go.mod go.sum ./
RUN go mod download
COPY . .
RUN CGO_ENABLED=0 GOOS=linux go build -o /api ./cmd/main.go

FROM build-stage AS run-test-stage
RUN go test -v ./...

FROM scratch AS build-release-stage
WORKDIR /
COPY --from=build-stage /api /api
EXPOSE 8080
ENTRYPOINT ["/api"]

# FROM golang:1.22 as builder
# WORKDIR /go/src/
# COPY . .
# RUN GOOS=linux CGO_ENABLED=0 go build -o server main.go 

# FROM scratch
# WORKDIR /go/
# COPY --from=builder /go/src/server /go
# CMD ["/go/server"]


# FROM golang:latest
# ENV PROJECT_DIR=/app GO111MODULE=on CGO_ENABLED=0
# WORKDIR /app
# RUN mkdir "/build"
# COPY . .
# RUN go get github.com/githubnemo/CompileDaemon
# RUN go install github.com/githubnemo/CompileDaemon
# ENTRYPOINT CompileDaemon -build="go build -o /build/app -buildvcs=false" -command="/build/app"


# FROM golang:1.21-rc-alpine3.17
# ENV PROJECT_DIR=/app GO111MODULE=on CGO_ENABLED=0
# RUN mkdir /app
# COPY .. /app
# WORKDIR /app
# RUN go get github.com/githubnemo/CompileDaemon
# RUN go install github.com/githubnemo/CompileDaemon
# ENTRYPOINT CompileDaemon -build="go build -o api" -command="./api"