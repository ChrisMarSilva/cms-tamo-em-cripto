# version: "3.7"

# volumes:
#   progresDB:
#   kong_data: {}
#   postgresql_master_data:
#     driver: local

# networks:
#   kong-net:
#     external: true
#   kong-net:
#     name: kong-net
#     driver: bridge
#   jaeger-net:
#     driver: bridge
#   graylog:
#     driver: bridge
#   loki:
#   app:
#   metrics:
#     driver: bridge
#   transactional:
#     driver: bridge
#   metrics:
#     driver: bridge
#   transactional:
#     driver: bridge

# services:

#   postgres:
#     image: postgres:latest
#     container_name: postgres
#     ports:
#       - '6500:5432'
#     volumes:
#       - progresDB:/data/postgres
#     env_file:
#       - ./app.env

#   pgAdmin:
#     image: dpage/pgadmin4
#     container_name: pgAdmin
#     env_file:
#       - ./app.env
#     ports:
#       - "5050:80"

#   kong-migrations:
#     image: "kong:2.3.2-alpine"
#     command: kong migrations bootstrap
#     depends_on:
#       - db
#     environment:
#       KONG_DATABASE: postgres
#       KONG_PG_DATABASE: kong
#       KONG_PG_HOST: db
#       KONG_PG_USER: kong
#       KONG_PG_PASSWORD: kong
#     networks:
#       - kong-net
#     restart: on-failure
#     deploy:
#       restart_policy:
#         condition: on-failure

#   kong-migrations-up:
#     image: "kong:2.3.2-alpine"
#     command: kong migrations up && kong migrations finish
#     depends_on:
#       - db
#     environment:
#       KONG_DATABASE: postgres
#       KONG_PG_DATABASE: kong
#       KONG_PG_HOST: db
#       KONG_PG_USER: kong
#       KONG_PG_PASSWORD: kong
#     networks:
#       - kong-net
#     restart: on-failure
#     deploy:
#       restart_policy:
#         condition: on-failure

#   kong:
#     image: "kong:2.3.2-alpine"
#     user: "kong"
#     depends_on:
#       - db
#     environment:
#       KONG_ADMIN_ACCESS_LOG: /dev/stdout
#       KONG_ADMIN_ERROR_LOG: /dev/stderr
#       KONG_ADMIN_LISTEN: '0.0.0.0:8001'
#       KONG_CASSANDRA_CONTACT_POINTS: db
#       KONG_DATABASE: postgres
#       KONG_PG_DATABASE: kong
#       KONG_PG_HOST: db
#       KONG_PG_USER: kong
#       KONG_PROXY_ACCESS_LOG: /dev/stdout
#       KONG_PROXY_ERROR_LOG: /dev/stderr
#       KONG_PG_PASSWORD: kong
    
#     networks:
#       - kong-net
#     ports:
#       - "8000:8000/tcp"
#       - "127.0.0.1:8001:8001/tcp"
#       - "8443:8443/tcp"
#       - "127.0.0.1:8444:8444/tcp"
#     healthcheck:
#       test: ["CMD", "kong", "health"]
#       interval: 10s
#       timeout: 10s
#       retries: 10
#     restart: on-failure
#     deploy:
#       restart_policy:
#         condition: on-failure
    
#   db:
#     image: postgres:9.5
#     environment:
#       POSTGRES_DB: kong
#       POSTGRES_USER: kong
#       POSTGRES_PASSWORD: kong
    
#     healthcheck:
#       test: ["CMD", "pg_isready", "-U", "kong"]
#       interval: 30s
#       timeout: 30s
#       retries: 3
#     restart: on-failure
#     deploy:
#       restart_policy:
#         condition: on-failure
#     stdin_open: true
#     tty: true
#     networks:
#       - kong-net
#     # volumes:
#     #   - kong_data:/var/lib/postgresql/data

#   konga-prepare:
#     container_name: konga-prepare
#     image: pantsel/konga:latest
#     command: "-c prepare -a postgres -u postgresql://kong:kong@db:5432/konga_db"
#     networks:
#       - kong-net
#     restart: on-failure
#     depends_on:
#       - db

#   konga:
#     container_name: konga
#     image: pantsel/konga:latest
#     restart: always
#     networks:
#       - kong-net
#     environment:
#       DB_ADAPTER: postgres
#       DB_HOST: db
#       DB_USER: kong
#       DB_PASSWORD: kong
#       TOKEN_SECRET: ahfdjgjgf79JKLFHJKh978953kgdfjkl
#       DB_DATABASE: konga_db
#       NODE_ENV: production
#     depends_on:
#       - db
#     ports:
#       - "1337:1337"

#   servicea:
#     image: thiagopereiracontas/kong-service:latest
#     environment:
#       PORT: ":8081"
#       CONTENT: "<h1>Service A</h1>"
#     networks:
#       - kong-net
#     ports:
#       - 8081:8081

#   serviceb:
#     image: thiagopereiracontas/kong-service:latest
#     environment:
#       PORT: ":8082"
#       CONTENT: "<h1>Service b</h1>"
#     networks:
#       - kong-net
#     ports:
#       - 8082:8082

#   servicec:
#     image: thiagopereiracontas/kong-service:latest
#     environment:
#       PORT: ":8083"
#       CONTENT: "<h1>Service C</h1>"
#     networks:
#       - kong-net
#     ports:
#       - 8083:8083

      
#   mysql-8.0:
#     image: mysql:8.0.18
#     container_name: mysql8
#     restart: always
#     command:
#       - "--default-authentication-plugin=mysql_native_password"
#     ports:
#       - 3306:3306
#     environment:
#       MYSQL_ROOT_PASSWORD: 123456
#     volumes:
#       - $PWD/mysql-data:/var/lib/mysql
#       - /etc/localtime:/etc/localtime

      
#   jaeger-collector:
#     image: jaegertracing/jaeger-collector:1.52
#     container_name: jaeger-collector
#     restart: always
#     environment:
#       - SPAN_STORAGE_TYPE=elasticsearch
#       - ES_SERVER_URLS=${ES_URLS}
#       - ES_USERNAME=${ES_USERNAME}
#       - ES_PASSWORD=${ES_PASSWORD}
#       - LOG_LEVEL=debug
#     networks:
#       - jaeger-net

#   jaeger-agent:
#     image: jaegertracing/jaeger-agent:1.52
#     container_name: jaeger-agent
#     restart: always
#     command: "--reporter.grpc.host-port=jaeger-collector:14250"
#     environment:
#       - LOG_LEVEL=debug
#     ports:
#       - "5775:5775/udp"
#       - "5778:5778"
#       - "6831:6831/udp"
#       - "6832:6832/udp"
#     networks:
#       - jaeger-net
#     depends_on:
#       - jaeger-collector

#   jaeger-query:
#     image: jaegertracing/jaeger-query:1.52
#     container_name: jaeger-query
#     restart: always
#     environment:
#       - SPAN_STORAGE_TYPE=elasticsearch
#       - ES_SERVER_URLS=${ES_URLS}
#       - ES_USERNAME=${ES_USERNAME}
#       - ES_PASSWORD=${ES_PASSWORD}
#       - LOG_LEVEL=debug
#     ports:
#       - 16686:16686
#     networks:
#       - jaeger-net

      
#     influxdb:
#         image: influxdb:2.0.7
#         environment:
#             DOCKER_INFLUXDB_INIT_MODE: setup
#             DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_USERNAME}
#             DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_PASSWORD}
#             DOCKER_INFLUXDB_INIT_ORG: iot
#             DOCKER_INFLUXDB_INIT_BUCKET: users_business_events
#             DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_TOKEN}
#         ports:
#         - "8086:8086"
# # MongoDB: https://hub.docker.com/_/mongo/
#   mongodb:
#     image: mongo:6.0.14
#     networks:
#       - graylog

#   opensearch:
#     image: "opensearchproject/opensearch:2.12.0"
#     environment:
#       - "OPENSEARCH_JAVA_OPTS=-Xms1g -Xmx1g"
#       - "bootstrap.memory_lock=true"
#       - "discovery.type=single-node"
#       - "action.auto_create_index=false"
#       - "plugins.security.ssl.http.enabled=false"
#       - "plugins.security.disabled=true"
#       # Can generate a password for `OPENSEARCH_INITIAL_ADMIN_PASSWORD` using a linux device via:
#       # tr -dc A-Z-a-z-0-9_@#%^-_=+ < /dev/urandom  | head -c${1:-32}
#       - OPENSEARCH_INITIAL_ADMIN_PASSWORD=+_8r#wliY3Pv5-HMIf4qzXImYzZf-M=M
#     ulimits:
#       memlock:
#         hard: -1
#         soft: -1
#       nofile:
#         soft: 65536
#         hard: 65536
#     restart: "on-failure"
#     networks:
#         - graylog

#   # Graylog: https://hub.docker.com/r/graylog/graylog/
#   graylog:
#     image: graylog/graylog:5.2
#     environment:
#     - GRAYLOG_NODE_ID_FILE=/usr/share/graylog/data/config/node-id
#     - GRAYLOG_HTTP_BIND_ADDRESS=0.0.0.0:9000
#     - GRAYLOG_ELASTICSEARCH_HOSTS=http://opensearch:9200
#     - GRAYLOG_MONGODB_URI=mongodb://mongodb:27017/graylog
#     # CHANGE ME (must be at least 16 characters)!
#     - GRAYLOG_PASSWORD_SECRET=somepasswordpepper
#     # Password: admin
#     - GRAYLOG_ROOT_PASSWORD_SHA2=8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918
#     - GRAYLOG_HTTP_EXTERNAL_URI=http://127.0.0.1:9000/
#     entrypoint: /usr/bin/tini -- wait-for-it elasticsearch:9200 --  /docker-entrypoint.sh
#     networks:
#       - graylog
#     restart: always
#     depends_on:
#       - mongodb
#       - opensearch
#     ports:
#       # Graylog web interface and REST API
#       - 9000:9000
#       # Syslog TCP
#       - 1514:1514
#       # Syslog UDP
#       - 1514:1514/udp
#       # GELF TCP
#       - 12201:12201
#       # GELF UDP
#       - 12201:12201/udp
#   # MongoDB: https://hub.docker.com/_/mongo/
#   mongo:
#     image: mongo:4.2
#     networks:
#       - graylog
#   # Elasticsearch: https://www.elastic.co/guide/en/elasticsearch/reference/7.10/docker.html
#   elasticsearch:
#     image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2
#     environment:
#       - http.host=0.0.0.0
#       - transport.host=localhost
#       - network.host=0.0.0.0
#       - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#     ulimits:
#       memlock:
#         soft: -1
#         hard: -1
#     deploy:
#       resources:
#         limits:
#           memory: 1g
#     networks:
#       - graylog
#   # Graylog: https://hub.docker.com/r/graylog/graylog/
#   graylog:
#     image: graylog/graylog:4.0
#     environment:
#       # CHANGE ME (must be at least 16 characters)!
#       - GRAYLOG_PASSWORD_SECRET=somepasswordpepper
#       # Password: admin
#       - GRAYLOG_ROOT_PASSWORD_SHA2=8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918
#       - GRAYLOG_HTTP_EXTERNAL_URI=http://127.0.0.1:9000/
#     entrypoint: /usr/bin/tini -- wait-for-it elasticsearch:9200 --  /docker-entrypoint.sh
#     networks:
#       - graylog
#     restart: always
#     depends_on:
#       - mongo
#       - elasticsearch
#     ports:
#       # Graylog web interface and REST API
#       - 9000:9000
#       # Syslog TCP
#       - 1514:1514
#       # Syslog UDP
#       - 1514:1514/udp
#       # GELF TCP
#       - 12201:12201
#       # GELF UDP
#       - 12201:12201/udp
#       # Log Input TCP
#       - 5555:5555

      
#   read:
#     image: grafana/loki:2.9.2
#     command: "-config.file=/etc/loki/config.yaml -target=read"
#     ports:
#       - 3101:3100
#       - 7946
#       - 9095
#     volumes:
#       - ./loki-config.yaml:/etc/loki/config.yaml
#     depends_on:
#       - minio
#     healthcheck:
#       test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
#     networks: &loki-dns
#       loki:
#         aliases:
#           - loki

#   write:
#     image: grafana/loki:2.9.2
#     command: "-config.file=/etc/loki/config.yaml -target=write"
#     ports:
#       - 3102:3100
#       - 7946
#       - 9095
#     volumes:
#       - ./loki-config.yaml:/etc/loki/config.yaml
#     healthcheck:
#       test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
#     depends_on:
#       - minio
#     networks:
#       <<: *loki-dns

#   promtail:
#     image: grafana/promtail:2.9.2
#     volumes:
#       - ./promtail-local-config.yaml:/etc/promtail/config.yaml:ro
#       - /var/run/docker.sock:/var/run/docker.sock
#     command: -config.file=/etc/promtail/config.yaml
#     depends_on:
#       - gateway
#     networks:
#       - loki

#   minio:
#     image: minio/minio
#     entrypoint:
#       - sh
#       - -euc
#       - |
#         mkdir -p /data/loki-data && \
#         mkdir -p /data/loki-ruler && \
#         minio server /data
#     environment:
#       - MINIO_ROOT_USER=loki
#       - MINIO_ROOT_PASSWORD=supersecret
#       - MINIO_PROMETHEUS_AUTH_TYPE=public
#       - MINIO_UPDATE=off
#     ports:
#       - 9000
#     volumes:
#       - ./.data/minio:/data
#     healthcheck:
#       test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
#       interval: 15s
#       timeout: 20s
#       retries: 5
#     networks:
#       - loki

#   grafana:
#     image: grafana/grafana:latest
#     environment:
#       - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
#       - GF_AUTH_ANONYMOUS_ENABLED=true
#       - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
#     depends_on:
#       - gateway
#     entrypoint:
#       - sh
#       - -euc
#       - |
#         mkdir -p /etc/grafana/provisioning/datasources
#         cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
#         apiVersion: 1
#         datasources:
#           - name: Loki
#             type: loki
#             access: proxy
#             url: http://gateway:3100
#             jsonData:
#               httpHeaderName1: "X-Scope-OrgID"
#             secureJsonData:
#               httpHeaderValue1: "tenant1"
#         EOF
#         /run.sh
#     ports:
#       - "3000:3000"
#     healthcheck:
#       test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
#     networks:
#       - loki

#   gateway:
#     image: nginx:latest
#     depends_on:
#       - read
#       - write
#     entrypoint:
#       - sh
#       - -euc
#       - |
#         cat <<EOF > /etc/nginx/nginx.conf
#         user  nginx;
#         worker_processes  5;  ## Default: 1

#         events {
#           worker_connections   1000;
#         }

#         http {
#           resolver 127.0.0.11;

#           server {
#             listen             3100;

#             location = / {
#               return 200 'OK';
#               auth_basic off;
#             }

#             location = /api/prom/push {
#               proxy_pass       http://write:3100\$$request_uri;
#             }

#             location = /api/prom/tail {
#               proxy_pass       http://read:3100\$$request_uri;
#               proxy_set_header Upgrade \$$http_upgrade;
#               proxy_set_header Connection "upgrade";
#             }

#             location ~ /api/prom/.* {
#               proxy_pass       http://read:3100\$$request_uri;
#             }

#             location = /loki/api/v1/push {
#               proxy_pass       http://write:3100\$$request_uri;
#             }

#             location = /loki/api/v1/tail {
#               proxy_pass       http://read:3100\$$request_uri;
#               proxy_set_header Upgrade \$$http_upgrade;
#               proxy_set_header Connection "upgrade";
#             }

#             location ~ /loki/api/.* {
#               proxy_pass       http://read:3100\$$request_uri;
#             }
#           }
#         }
#         EOF
#         /docker-entrypoint.sh nginx -g "daemon off;"
#     ports:
#       - "3100:3100"
#     healthcheck:
#       test: ["CMD", "service", "nginx", "status"]
#       interval: 10s
#       timeout: 5s
#       retries: 5
#     networks:
#       - loki

#   flog:
#     image: mingrammer/flog
#     command: -f json -d 200ms -l
#     networks:
#       - loki
#   loki:
#     image: grafana/loki:2.9.0
#     ports:
#       - "3100:3100"
#     command: -config.file=/etc/loki/local-config.yaml
#     networks:
#       - loki

#   promtail:
#     image: grafana/promtail:2.9.0
#     volumes:
#       - /var/log:/var/log
#     command: -config.file=/etc/promtail/config.yml
#     networks:
#       - loki

#   grafana:
#     environment:
#       - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
#       - GF_AUTH_ANONYMOUS_ENABLED=true
#       - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
#     entrypoint:
#       - sh
#       - -euc
#       - |
#         mkdir -p /etc/grafana/provisioning/datasources
#         cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
#         apiVersion: 1
#         datasources:
#         - name: Loki
#           type: loki
#           access: proxy
#           orgId: 1
#           url: http://loki:3100
#           basicAuth: false
#           isDefault: true
#           version: 1
#           editable: false
#         EOF
#         /run.sh
#     image: grafana/grafana:latest
#     ports:
#       - "3000:3000"
#     networks:
#       - loki

      
#   nginx-app:
#     container_name: nginx-app
#     image: nginx
#     labels:
#       logging: "promtail"
#       logging_jobname: "containerlogs"
#     ports:
#       - 8080:80
#     networks:
#       - app

#   grafana:
#     image: grafana/grafana:latest
#     ports:
#       - 3000:3000
#     volumes:
#       - ./config/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yaml
#     environment:
#       - GF_AUTH_ANONYMOUS_ENABLED=true
#       - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
#       - GF_AUTH_DISABLE_LOGIN_FORM=true
#     networks:
#       - app

#   loki:
#     image: grafana/loki:latest
#     ports:
#       - 3100:3100
#     command: -config.file=/etc/loki/local-config.yaml
#     networks:
#       - app

#   promtail:
#     image:  grafana/promtail:latest
#     container_name: promtail
#     volumes:
#       - ./config/promtail.yaml:/etc/promtail/docker-config.yaml
#       - /var/lib/docker/containers:/var/lib/docker/containers:ro
#       - /var/run/docker.sock:/var/run/docker.sock
#     command: -config.file=/etc/promtail/docker-config.yaml
#     depends_on:
#       - loki
#     networks:
#       - app
      
#   tracing-example:
#     image: tracing-example
#     ports:
#       - 8000:8000
#     logging:
#       driver: loki
#       options:
#         loki-url: http://localhost:3100/loki/api/v1/push

#   tempo:
#     image: grafana/tempo:0.7.0
#     command: ["--target=all", "--storage.trace.backend=local", "--storage.trace.local.path=/var/tempo", "--auth.enabled=false"]
#     ports:
#     - 8081:80
#     logging:
#       driver: loki
#       options:
#         loki-url: 'http://localhost:3100/api/prom/push'

#   tempo-query:
#     image: grafana/tempo-query:0.7.0
#     environment:
#     - BACKEND=tempo:80
#     volumes:
#     - ./etc/tempo-query.yaml:/etc/tempo-query.yaml
#     ports:
#     - "16686:16686"  # jaeger-ui
#     depends_on:
#     - tempo
#     logging:
#       driver: loki
#       options:
#         loki-url: 'http://localhost:3100/api/prom/push'

#   grafana:
#     image: grafana/grafana:7.3.x-exemplars
#     volumes:
#     - ./config/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
#     environment:
#     - GF_AUTH_ANONYMOUS_ENABLED=true
#     - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
#     - GF_AUTH_DISABLE_LOGIN_FORM=true
#     ports:
#     - "3000:3000"

#   loki:
#     image: grafana/loki:2.2.1
#     command: -config.file=/etc/loki/local-config.yaml
#     ports:
#     - "3100:3100"
#     logging:
#       driver: loki
#       options:
#         loki-url: 'http://localhost:3100/api/prom/push'

#   prometheus:
#     image: cstyan/prometheus:exemplars-64206a
#     volumes:
#       - ./config/prometheus.yaml:/etc/prometheus.yaml
#     entrypoint:
#       - /bin/prometheus
#       - --config.file=/etc/prometheus.yaml
#     ports:
#       - "9090:9090"
#     hotrod:
#       image: jaegertracing/example-hotrod:latest
#       ports:
#         - '8080:8080'
#         - '8083:8083'
#       command: ["-m","prometheus","all"]
#       environment:
#         - JAEGER_AGENT_HOST=jaeger-agent
#         - JAEGER_AGENT_PORT=6831
#         - JAEGER_SAMPLER_TYPE=remote
#         - JAEGER_SAMPLING_ENDPOINT=http://jaeger-agent:5778/sampling
#       depends_on:
#         - jaeger-agent

#     jaeger-collector:
#       image: jaegertracing/jaeger-collector
#       command: 
#         - "--cassandra.keyspace=jaeger_v1_dc1"
#         - "--cassandra.servers=cassandra"
#         - "--collector.zipkin.host-port=9411"
#         - "--sampling.initial-sampling-probability=.5"
#         - "--sampling.target-samples-per-second=.01"
#       environment: 
#         - SAMPLING_CONFIG_TYPE=adaptive
#       ports:
#         - "14269:14269"
#         - "14268:14268"
#         - "14250"
#         - "9411:9411"
#       restart: on-failure
#       depends_on:
#         - cassandra-schema

#     jaeger-query:
#       image: jaegertracing/jaeger-query
#       command: ["--cassandra.keyspace=jaeger_v1_dc1", "--cassandra.servers=cassandra"]
#       ports:
#         - "16686:16686"
#         - "16687"
#       restart: on-failure
#       depends_on:
#         - cassandra-schema

#     jaeger-agent:
#       image: jaegertracing/jaeger-agent
#       command: ["--reporter.grpc.host-port=jaeger-collector:14250"]
#       ports:
#         - "5775:5775/udp"
#         - "6831:6831/udp"
#         - "6832:6832/udp"
#         - "5778:5778"
#       restart: on-failure
#       depends_on:
#         - jaeger-collector

#     cassandra:
#       image: cassandra:4.0

#     cassandra-schema:
#       image: jaegertracing/jaeger-cassandra-schema
#       depends_on:
#         - cassandra

        
# x-postgres-common:
#   &postgres-common
#   image: postgres:14-alpine
#   user: postgres
#   restart: always
#   healthcheck:
#     test: 'pg_isready -U user --dbname=postgres'
#     interval: 10s
#     timeout: 5s
#     retries: 5

# services:
#   postgres_primary:
#     <<: *postgres-common
#     ports:
#       - 5432:5432
#     environment:
#       POSTGRES_USER: user
#       POSTGRES_DB: postgres
#       POSTGRES_PASSWORD: password
#       POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
#       POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
#     command: |
#       postgres 
#       -c wal_level=replica 
#       -c hot_standby=on 
#       -c max_wal_senders=10 
#       -c max_replication_slots=10 
#       -c hot_standby_feedback=on
#     volumes:
#       - ./00_init.sql:/docker-entrypoint-initdb.d/00_init.sql

#   postgres_replica:
#     <<: *postgres-common
#     ports:
#       - 5433:5432
#     environment:
#       PGUSER: replicator
#       PGPASSWORD: replicator_password
#     command: |
#       bash -c "
#       until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=postgres_primary --port=5432
#       do
#       echo 'Waiting for primary to connect...'
#       sleep 1s
#       done
#       echo 'Backup done, starting replica...'
#       chmod 0700 /var/lib/postgresql/data
#       postgres
#       "
#     depends_on:
#       - postgres_primary

      
# postgres_primary:
#   <<: *postgres-common
#   ports:
# 	- 5432:5432
#   environment:
# 	POSTGRES_USER: user
# 	POSTGRES_DB: postgres
# 	POSTGRES_PASSWORD: password
# 	POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
# 	POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
#   command: |
# 	postgres 
# 	-c wal_level=replica 
# 	-c hot_standby=on 
# 	-c max_wal_senders=10 
# 	-c max_replication_slots=10 
# 	-c hot_standby_feedback=on
#   volumes:
# 	- ./00_init.sql:/docker-entrypoint-initdb.d/00_init.sql
# postgres_replica:
#     <<: *postgres-common
#     ports:
#       - 5433:5432
#     environment:
#       PGUSER: replicator
#       PGPASSWORD: replicator_password
#     command: |
#       bash -c "
#       until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=postgres_primary --port=5432
#       do
#       echo 'Waiting for primary to connect...'
#       sleep 1s
#       done
#       echo 'Backup done, starting replica...'
#       chmod 0700 /var/lib/postgresql/data
#       postgres
#       "
#     depends_on:
#       - postgres_primary

      
# database:
#   image: postgres:13
#   container_name: my_postgres_database
#   restart: always
#   volumes:
# 	  - ./data:/var/lib/postgresql/data
# 	  - ./my-postgres.conf:/etc/postgresql/postgresql.conf
# 	  - ./my-pg_hba.conf:/etc/postgresql/pg_hba.conf
#   ports:
# 	- "127.0.0.1:5432:5432"
#   environment:
# 	- 'POSTGRES_PASSWORD=my_password'
# 	- 'POSTGRES_DB=my_default_database'
#   postgresql-master:
#     image: 'docker.io/bitnami/postgresql:11-debian-10'
#     ports:
#       - '5432:5432'
#     volumes:
#       - 'postgresql_master_data:/bitnami/postgresql'
#     environment:
#       - POSTGRESQL_PGAUDIT_LOG=READ,WRITE
#       - POSTGRESQL_LOG_HOSTNAME=true
#       - POSTGRESQL_REPLICATION_MODE=master
#       - POSTGRESQL_REPLICATION_USER=repl_user
#       - POSTGRESQL_REPLICATION_PASSWORD=repl_password
#       - POSTGRESQL_USERNAME=postgres
#       - POSTGRESQL_DATABASE=my_database
#       - ALLOW_EMPTY_PASSWORD=yes
#   postgresql-slave:
#     image: 'docker.io/bitnami/postgresql:11-debian-10'
#     ports:
#       - '5433:5432'
#     depends_on:
#       - postgresql-master
#     environment:
#       - POSTGRESQL_USERNAME=postgres
#       - POSTGRESQL_PASSWORD=my_password
#       - POSTGRESQL_MASTER_HOST=postgresql-master
#       - POSTGRESQL_PGAUDIT_LOG=READ,WRITE
#       - POSTGRESQL_LOG_HOSTNAME=true
#       - POSTGRESQL_REPLICATION_MODE=slave
#       - POSTGRESQL_REPLICATION_USER=repl_user
#       - POSTGRESQL_REPLICATION_PASSWORD=repl_password
#       - POSTGRESQL_MASTER_PORT_NUMBER=5432

      
#   postgresql-master:
#     image: bitnami/postgresql
#     restart: always
#     ports:
#       - '5432:5432'
#     volumes:
#       - postgresql_master_data:/bitnami/postgresql
#       - ./db.sql:/docker-entrypoint-initdb.d/db.sql
#     environment:
#       - POSTGRESQL_PGAUDIT_LOG=READ,WRITE
#       - POSTGRESQL_LOG_HOSTNAME=true
#       - POSTGRESQL_REPLICATION_MODE=master
#       - POSTGRESQL_REPLICATION_USER=repl_user
#       - POSTGRESQL_REPLICATION_PASSWORD=repl_user
#       - POSTGRESQL_USERNAME=postgres
#       - POSTGRESQL_PASSWORD=postgres
#       - POSTGRESQL_DATABASE=development_database
#       - ALLOW_EMPTY_PASSWORD=yes

#   postgresql-slave:
#     image: bitnami/postgresql
#     restart: always
#     ports:
#       - '5432'
#     depends_on:
#       - postgresql-master
#     environment:
#       - POSTGRESQL_PASSWORD=postgres
#       - POSTGRESQL_MASTER_HOST=postgresql-master
#       - POSTGRESQL_PGAUDIT_LOG=READ
#       - POSTGRESQL_LOG_HOSTNAME=true
#       - POSTGRESQL_REPLICATION_MODE=slave
#       - POSTGRESQL_REPLICATION_USER=repl_user
#       - POSTGRESQL_REPLICATION_PASSWORD=repl_user
#       - POSTGRESQL_MASTER_PORT_NUMBER=5432
#       - ALLOW_EMPTY_PASSWORD=yes
#   rabbitmq:
#     image: rabbitmq:management
#     container_name: cryptowatch-rabbitmq
#     environment:
#       - RABBITMQ_DEFAULT_USER=guest
#       - RABBITMQ_DEFAULT_PASS=guest
#     ports:
#       - "5672:5672"
#       - "15672:15672"
#   redis:
#     image: redis
#     container_name: cryptowatch-redis
#     ports:
#       - "6379:6379"
#   sqlserver:
#     platform: linux/amd64
#     image: mcr.microsoft.com/mssql/server:2022-latest
#     container_name: cryptowatch-sqlserver
#     environment:
#       SA_PASSWORD: "CryptoW@tch2024"
#       ACCEPT_EULA: "Y"
#       MSSQL_PID: "Developer"
#     ports:
#       - "1433:1433"
#   mongo:
#     image: mongo
#     container_name: cryptowatch-mongo
#     restart: always
#     environment:
#       MONGO_INITDB_ROOT_USERNAME: guest
#       MONGO_INITDB_ROOT_PASSWORD: guest
#     ports:
#       - "27017:27017"
# networks:
#   default:
#     driver: bridge

    
#   product-db:
#     image: product-db
#     container_name: product-db
#     expose:
#       - '3306'
#     ports:
#       - "3306:3306"
#     environment:
#       MYSQL_ROOT_PASSWORD: supersecret
#       MYSQL_DATABASE: ProductDb
#       MYSQL_USER: AdminUser
#       MYSQL_PASSWORD: AdminPassword
#     volumes:
#       - ./productdb/mysql:/var/lib/mysql
#     healthcheck:
#       test: "exit 0"
#     networks:
#       - transactional

#   product-api:
#     image: product-api
#     container_name: product-api
#     expose:
#       - '8081'
#     ports:
#       - "8081:8081"
#     depends_on:
#       product-db:
#         condition: service_healthy
#     networks:
#       - metrics
#       - transactional

#   prometheus:
#     image: prom/prometheus
#     container_name: prometheus
#     expose:
#       - '9090'
#     ports:
#       - "9090:9090"
#     volumes:
#       - ./prometheus:/etc/prometheus
#     networks:
#       - metrics

# # ALTERAÇÃO <<<<<<<<<<<<<<<<<<<<<<<<<
#   grafana:
#     image: grafana/grafana
#     container_name: grafana
#     hostname: grafana
#     environment:
#       - GF_SECURITY_ADMIN_PASSWORD=admin
#     restart: unless-stopped
#     ports:
#       - 3000:3000
#     networks:
#       - metrics

      
#   product-db:
#     image: product-db
#     container_name: product-db
#     expose:
#       - '3306'
#     ports:
#       - "3306:3306"
#     environment:
#       MYSQL_ROOT_PASSWORD: supersecret
#       MYSQL_DATABASE: ProductDb
#       MYSQL_USER: AdminUser
#       MYSQL_PASSWORD: AdminPassword
#     volumes:
#       - ./productdb/mysql:/var/lib/mysql
#     healthcheck:
#       test: "exit 0"
#     networks:
#       - transactional

#   product-api:
#     image: product-api
#     container_name: product-api
#     expose:
#       - '8081'
#     ports:
#       - "8081:8081"
#     depends_on:
#       product-db:
#         condition: service_healthy
#     networks:
#       - metrics
#       - transactional

# # ALTERAÇÃO 2 <<<<<<<<<<<<<<<<<<<<<<<<<
#   prometheus:
#     image: prom/prometheus
#     container_name: prometheus
#     expose:
#       - '9090'
#     ports:
#       - "9090:9090"
#     volumes:
#       - ./prometheus:/etc/prometheus
#     networks:
#       - metrics
	  

    
#   app:
#     container_name: go-live-reload
#     build:
#       context: .
#       dockerfile: ./Dockerfile.dev
#     ports:
#       - 8080:8080
#     volumes:
#       - ./:/app

      
#   api:
#     container_name: api
#     build:
#       context: .
#       dockerfile: Dockerfile
#     ports:
#       - 8000:8000
#     volumes:
#       - ./:/app